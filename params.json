{"name":"Cartero","tagline":"Mailing Phishing Framework","body":"# Cartero\r\n\r\n### Description\r\nA simple Phishing Framework Library with a CLI tool. The project was born out of necessity on projects. Even though there are many projects out there, we were not able to find a suitable solution that gave us both easy of use and customizability.\r\n\r\nCartero is a modular project divided into commands that perform independent tasks (i.e. Mailer, Cloner, Listener, AdminConsole, etc...). In addition each sub-command has options. \r\n\r\nFor example, if we wanted to clone gmail.com, we simply have to perform the following commands. \r\n\r\n```shell\r\n❯❯❯ ./cartero Cloner --url https://gmail.com --path /tmp --webserver gmail_com\r\n❯❯❯ ./cartero Listener --webserver /tmp/gmail_com -p 80\r\nLaunching mongodb\r\nPuma starting in single mode...\r\n* Version 2.8.2 (ruby 2.1.1-p76), codename: Sir Edmund Percival Hillary\r\n* Min threads: 4, max threads: 16\r\n* Environment: production\r\n* Listening on tcp://0.0.0.0:80\r\nUse Ctrl-C to stop\r\n```\r\n\r\nOnce we have a site up and running we can simply use the Mailer command to send templated emails to our testing victims:\r\n\r\n```shell\r\n❯❯❯ ./cartero Mailer --data victims.json --server gmail2 --subject \"Internal Memo\" --htmlbody email_html.html --attachment payload.pdf --from \"John Doe <jdoe@company.com>\"\r\nSending victim1@company.com\r\nSending victim2@company.com\r\nSending victim3@company.com\r\n\r\n```\r\n\r\n### Installation\r\n\r\n#### Dependencies\r\n```shell\r\n❯❯❯ brew install mongodb\r\n```\r\n\r\n#### Framework\r\n```shell\r\n❯❯❯ git clone github.com/section9labs/Cartero\r\n❯❯❯ cd Cartero\r\n❯❯❯ gem install bundle\r\n❯❯❯ bundle install\r\n❯❯❯ cd bin\r\n```\r\n\r\n### Usage\r\n### Commands\r\nCartero is a very simple to use CLI.\r\n\r\n```shell\r\n❯❯❯ ./cartero\r\nUsage: cartero [options]\r\n\r\nList of Commands:\r\n    AdminConsole, AdminWeb, Mailer, Cloner, Listener, Servers, Templates\r\n\r\nGlobal options:\r\n        --proxy [HOST:PORT]          Sets TCPSocket Proxy server\r\n    -c, --config [CONFIG_FILE]       Provide a different cartero config file\r\n    -v, --[no-]verbose               Run verbosely\r\n    -p [PORT_1,PORT_2,..,PORT_N],    Global Flag fo Mailer and Webserver ports\r\n        --ports\r\n    -m, --mongodb [HOST:PORT]        Global Flag fo Mailer and Webserver ports\r\n    -d, --debug                      Sets debug flag on/off\r\n        --editor [EDITOR]            Edit Server\r\n        --list-commands              Prints list of commands for bash completion\r\n\r\nCommon options:\r\n    -h, --help [COMMAND]             Show this message\r\n        --version                    Shows cartero CLI version\r\n```\r\n\r\n### Basic Commands\r\n\r\n#### Cloner\r\nA simple WebSite Cloner. It allows us to download and convert a website into a Cartero WebServer application.\r\nIn this way we can easily customize the website to Harvest Credentials, Server Payloads, or create a fully customized website.\r\n\r\n```shell\r\n❯❯❯ ./cartero Cloner\r\nUsage: Cartero Cloner [options]\r\n    -U, --url [URL_PATH]             Full Path of site to clone\r\n    -W, --webserver [SERVER_NAME]    Sets WebServer name to use\r\n    -p, --path [PATH]                Sets path to save webserver\r\n    -P, --payload [PAYLOAD_PATH]     Sets payload path\r\n        --useragent [UA_STRING]      Sets user agent for cloning\r\n        --wget                       Use wget to clone url\r\n        --apache                     Generate Apache Proxy conf\r\n    -h, --help                       Show this message\r\n```\r\nBy default the command users our own internal system to download and convert links to render, but we also support a *--wget* option that will use wget system command.\r\n\r\n#### Listener\r\nThe listener is the system responsible of running the WebServer created through Cloner or manually. By default we also have a very simple WebServer if none is provided.\r\n\r\n```shell\r\n❯❯❯ ./cartero Listener\r\nUsage: Cartero Listener [options]\r\n    -i, --ip [1.1.1.1]               Sets IP interface, default is 0.0.0.0\r\n    -p [PORT_1,PORT_2,..,PORT_N],    Sets Email Payload Ports to scan\r\n        --ports\r\n    -s, --ssl                        Run over SSL. [this also requires --sslcert and --sslkey]\r\n    -C, --sslcert [CERT_PATH]        Sets Email Payload Ports to scan\r\n    -K, --sslkey [KEY_PATH]          Sets SSL key to use for Listener.\r\n    -V, --views [VIEWS_FOLDER]       Sets SSL Certificate to use for Listener.\r\n    -P, --public [PUBLIC_FOLDER]     Sets a Sinatra public_folder\r\n    -W [WEBSERVER_FOLDER],           Sets the sinatra full path from cloner.\r\n        --webserver\r\n        --payload [PAYLOAD]          Sets a payload download to serve on /download\r\n        --customapp [CUSTOM_SINATRA] Sets a custom Sinatra::Base WebApp. Important, WebApp name should be camelized of filename\r\n    -h, --help                       Show this message\r\n\r\n```\r\nThe WebServers support ssl keys, different public and view paths. Additionally the servers can also be hosted on multiple ports at the same time and they can be bind to a specific IP address as well.\r\n\r\n#### Servers\r\nIn order to send emails campaigns we need to setup servers. This is a command that would help Cartero to create, store and list servers. All data is stored on .cartero configuration directory.\r\n\r\n```shell\r\n❯❯❯ ./cartero Servers\r\n\r\nUsage: Cartero Servers [options]\r\n    -a, --add [NAME]                 Add Server\r\n    -e, --edit [NAME]                Edit Server\r\n    -d, --delete [NAME]              Edit Server\r\n    -l, --list                       List servers\r\n    -h, --help                       Show this message\r\n```\r\n\r\n#### Templates\r\nJust like Servers, email campaigns also need to send a body or html body. This will allow you to keep track, create, list and edit templates being used for each email. It is worth noting that this are not necessary to use and the Mailer command takes direct path to emails templates as well.\r\n\r\n```shell\r\n❯❯❯ ./cartero Templates\r\nUsage: Cartero Templates [options]\r\n    -a, --add [NAME]                 Add Template\r\n    -e, --edit [NAME]                Edit Template\r\n    -d, --delete [NAME]              Edit Template\r\n    -l, --list                       List Templates\r\n    -h, --help                       Show this message\r\n```\r\n#### Mailer\r\nThis is the main command and component in our Framework. Mailer allows Cartero users to send custom templated emails to one or more email addresses.\r\nEach email can be customized using the powerful erb Template engine, allowing users to create complex programming within the templates and send massive, but yet very targeted emails.\r\nFor more information on how to build custom templates, please refer to our Examples.\r\n\r\n```shell\r\n❯❯❯ ./cartero Mailer\r\nUsage: Cartero Mailer [options]\r\n    -D, --data [DATA_FILE]           File containing template data sets\r\n    -S, --server [SERVER_NAME]       Sets Email server to use\r\n    -s, --subject [EMAIL_SUBJECT]    Sets Email subject\r\n    -f, --from [EMAIL_FROM]          Sets Email from\r\n    -r, --reply-to [EMAIL_REPLY_TO]  Sets Email from\r\n    -b, --body [FILE_PATH]           Sets Email Text Body\r\n    -B, --htmlbody [FILE_PATH]       Sets Email HTML Body\r\n    -c, --charset [CHARSET]          Sets Email charset\r\n    -C [CONTENT_TYPE],               Sets Email content type\r\n        --content-type\r\n    -a [FILE_1,FILE_2,..,FILE_N],    Sets Email Attachments\r\n        --attachment\r\n    -p [PORT_1,PORT_2,..,PORT_N],    Sets Email Payload Ports to scan\r\n        --ports\r\n    -h, --help                       Show this message\r\n```\r\n\r\n#### AdminWeb\r\nThe Admin Web is a simple Web-Application that allows to list information about each Campaign.\r\n\r\n```shell\r\n❯❯❯ ./cartero AdminConsole\r\nUsage: Cartero AdminConsole [options]\r\n    -i, --ip [1.1.1.1]               Sets IP interface, default is 0.0.0.0\r\n    -p [PORT_1,PORT_2,..,PORT_N],    Sets Email Payload Ports to scan\r\n        --ports\r\n    -s, --ssl                        Run over SSL. [this also requires --sslcert and --sslkey]\r\n    -C, --sslcert [CERT_PATH]        Sets Email Payload Ports to scan\r\n    -K, --sslkey [KEY_PATH]          Sets Email Payload Ports to scan\r\n    -h, --help                       Show this message\r\n```\r\n\r\n### AdminConsole\r\nThe Admin Console is CLI tool that allows to list information about Persons, Campaigns, Hits and Credentials gathered.  \r\n```shell\r\n❯❯❯ ./cartero AdminConsole\r\nUsage: Cartero AdminConsole [options]\r\n    -p, --persons [LATEST_N]         Display the list of persons that responded\r\n    -i, --hits [LATEST_N]            Display the list of hits\r\n    -c, --creds [LATEST_N]           Display the list of Credentials\r\n    -a, --all                        Sets Email Payload Ports to scan\r\n    -f, --filter                     flag to search by parameters\r\n        --email [EMAIL]              Display the list of hits\r\n        --campaign [CAMPAIGN]        Display the list of hits\r\n        --ip [IP_ADDRESS]            Display the list of hits\r\n    -h, --help                       Show this message\r\n\r\n```\r\n\r\n### Building Commands\r\n\r\nCommands have a fairly easy infrastructure. Default Framework commands are stored on _Cartero/lib/cartero/commands/*.rb_ and _~/.cartero/commands/*.rb_.\r\n\r\n```ruby\r\nmodule Cartero\r\nmodule Commands\r\nclass CommandName < Cartero::Command\r\n\tdef initialize\r\n\t\tsuper do |opts|\r\n\t\t\topts.on(\"-x\", \"--xoption [DATA_FILE]\", String,\r\n    \t\t\"Description of command option\") do |data|\r\n      \t@options.xoption = data\r\n    \tend\r\n      opts.on(\"-y\", \"--yoption [DATA_FILE]\", String,\r\n        \"Description of command option\") do |data|\r\n        @options.xoption = data\r\n      end\r\n      # help() option already provided.\r\n    end\r\n  end\r\n\r\n  def setup\r\n    # This will be hooked and run before run().\r\n    # It is meant as a method so the commands can run everything before that.\r\n  end\r\n\r\n  def run\r\n    # Everything that will run.\r\n  end\r\n\r\n  def after\r\n    # This is the place to run clean-up code.\r\n  end\r\nend\r\nend\r\nend\r\n```\r\n\r\n\r\n### Mailer Templates\r\nEmails are simple txt files or limited HTML files, depending on the type of format being used. Cartero allows to build and tempaltes both formats. In order to allow complex templating we use erb ruby gem, also used in many projects like Sinatra, Rails, etc.\r\n\r\nFiles can be extremely customized given erb allows for programatically edits on run time. Additionally we add an encrypted self[:payload] to each email template that allows Cartero to indentify each specific entity regardless. Last, but not least, this payload is encrypted using a key that is randomly generated and only exists on the Cartero config directory, allowing attackers to keep data secure and away from detection. \r\n\r\n**SAMPLE DATA FILE**\r\n```json\r\n[{\r\n    \"email\": \"johndoe@gmail.com\",\r\n    \"name\": \"John Doe\"\r\n}, {\r\n    \"email\": \"gh@gmail.com\",\r\n    \"name\": \"Gas Hill\"\r\n}, {\r\n    \"email\": \"johndoe@hotmail.com\",\r\n    \"name\": \"John Doe 2\"\r\n}, {\r\n    \"email\": \"janedoe@hotmail.com\",\r\n    \"name\": \"Jane Doe - Hotmail\",\r\n    \"subject\": \"Hotmail Test 123\"\r\n}]\r\n```\r\n**HTML SAMPLE TEMPLATE**\r\n```html\r\n<html>\r\n<body>\r\n<h3> Hello Spear Phishing World <%= self[:name] %>,</h3>\r\n<p> This is an automated email to your email <%= self[:email] %>.<p>\r\n<% if self[:ports] %>\r\n\t<% self[:ports].each do |port| %>\r\n\t    <img alt=\"\" width=\"1\" height=\"1\" border=\"0\" style=\"height:1px !important;width:1px !important;border-width:0 !important;margin-top:0 !important;margin-bottom:0 !important;margin-right:0 !important;margin-left:0 !important;padding-top:0 !important;padding-bottom:0 !important;padding-right:0 !important;padding-left:0 !important;\" src=\"http://localhost:<%= port %>/image?key=<%= self[:payload] %>\">\r\n\t<% end %>\r\n<% end %>\r\n</body>\r\n</html>\r\n\r\n```\r\n\r\n**TEXT SAMPLE TEMPLATE**\r\n```txt\r\nHola <%= self[:name] %>,\r\nThis email needs to be displayed as HTML.\r\nThis is an automated email to your email<%= self[:email] %>.\r\nIn addition, this email can also be displayed securely\r\non http://192.168.1.216:8080/click?key=<%= self[:payload] %>\r\n\r\ncheers,\r\n\r\n<%= self[:from_name] %>\r\n\r\n```\r\n\r\n### Servers\r\nServers can be managed using the Cartero Servers command, which allows to add, edit and delete servers.\r\nAdditionally, anyone can easily create them manually and store them in _~/.cartero/servers/*.json_\r\n\r\n\r\n```json\r\n{\r\n    \"name\": \"gmail\",\r\n    \"type\": \"smtp\",\r\n    \"options\": {\r\n        \"address\": \"smtp.yourserver.com\",\r\n        \"port\": 25,\r\n        \"user_name\": \"user\",\r\n        \"password\": \"password\",\r\n        \"authentication\": \"plain\",\r\n        \"domain\": \"localhost.localdomain\"\r\n    }\r\n}\r\n```\r\n### Authors and Contributors\r\n@FreedomCoder\r\n\r\n### Support or Contact\r\nhttps://github.com/Section9Labs/Cartero/issues\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}